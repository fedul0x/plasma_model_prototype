from math import *

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


from random import *
t0 = 1e-2
# x00, y00, z00 = 0, 0, -10
# x01, y01, z01 = 10, 10, 10
# x10, y10, z10 = 0, 0, 10
# x11, y11, z11 = 11, 10, -10

# x00, y00, z00 = 0, 0, 0
# x01, y01, z01 = 10, 10, 10
# x10, y10, z10 = 0, 0, 0
# x11, y11, z11 = 10, 10, 0

# plt.plot([x00, x01], [y00, y01])
# plt.plot([x10, x11], [y10, y11])
# for y in range(0, 1000, 25):
while (True):
	fig = plt.figure()
	ax = fig.add_subplot(111, projection='3d')
	# x00, y00, z00 = randint(0, 4)+random(), randint(0, 4)+random(), randint(0, 4)+random()
	# x01, y01, z01 = randint(6, 9)+random(), randint(6, 9)+random(), randint(6, 9)+random()
	# # x01, y01, z01 = x00, y00, z00
	# x10, y10, z10 = randint(0, 4)+random(), randint(0, 4)+random(), randint(0, 4)+random()
	# x11, y11, z11 = randint(6, 9)+random(), randint(6, 9)+random(), randint(6, 9)+random()

	x00, y00, z00 = 0.00013855105431415755, 0.006272936438532712, 0.0002711880779027177
	x01, y01, z01 = 0.00015595716893141565, 0.00627580099558285, 0.0002738366390832737
	x10, y10, z10 = 0.0001250000527018696, 0.006249994578053156, 0.0002500014158055006
	x11, y11, z11 = 0.0001250000527018696, 0.006249994578053156, 0.0002500014158055006
	r1, r2 = 3.6113373932276563e-06, 1.1183002300958185e-10
	# x00 = y/100
	# y00 = y/100
	k0x = (x01 - x00) / t0
	k0y = (y01 - y00) / t0
	k0z = (z01 - z00) / t0
	k1z = (z11 - z10) / t0
	k1y = (y11 - y10) / t0
	k1x = (x11 - x10) / t0
	b0x, b0y, b0z = x00, y00, z00# - k0x*t0
	b1x, b1y, b1z = x10, y10, z10# - k0x*t0
	# v = (t0*(k1x*t0*x00 - k1x*t0*x10 + k1y*t0*y00 - k1y*t0*y10 + k1z*t0*z00 - k1z*t0*z10 + x00**2 - x00*x01 - x00*x10 + x01*x10 + y00**2 - y00*y01 - y00*y10 + y01*y10 + z00**2 - z00*z01 - z00*z10 + z01*z10) + sqrt(t0**2*(k1x**2*r1**2*t0**2 + 2*k1x**2*r1*r2*t0**2 + k1x**2*r2**2*t0**2 - k1x**2*t0**2*y00**2 + 2*k1x**2*t0**2*y00*y10 - k1x**2*t0**2*y10**2 - k1x**2*t0**2*z00**2 + 2*k1x**2*t0**2*z00*z10 - k1x**2*t0**2*z10**2 + 2*k1x*k1y*t0**2*x00*y00 - 2*k1x*k1y*t0**2*x00*y10 - 2*k1x*k1y*t0**2*x10*y00 + 2*k1x*k1y*t0**2*x10*y10 + 2*k1x*k1z*t0**2*x00*z00 - 2*k1x*k1z*t0**2*x00*z10 - 2*k1x*k1z*t0**2*x10*z00 + 2*k1x*k1z*t0**2*x10*z10 + 2*k1x*r1**2*t0*x00 - 2*k1x*r1**2*t0*x01 + 4*k1x*r1*r2*t0*x00 - 4*k1x*r1*r2*t0*x01 + 2*k1x*r2**2*t0*x00 - 2*k1x*r2**2*t0*x01 - 2*k1x*t0*x00*y00*y01 + 2*k1x*t0*x00*y00*y10 + 2*k1x*t0*x00*y01*y10 - 2*k1x*t0*x00*y10**2 - 2*k1x*t0*x00*z00*z01 + 2*k1x*t0*x00*z00*z10 + 2*k1x*t0*x00*z01*z10 - 2*k1x*t0*x00*z10**2 + 2*k1x*t0*x01*y00**2 - 4*k1x*t0*x01*y00*y10 + 2*k1x*t0*x01*y10**2 + 2*k1x*t0*x01*z00**2 - 4*k1x*t0*x01*z00*z10 + 2*k1x*t0*x01*z10**2 - 2*k1x*t0*x10*y00**2 + 2*k1x*t0*x10*y00*y01 + 2*k1x*t0*x10*y00*y10 - 2*k1x*t0*x10*y01*y10 - 2*k1x*t0*x10*z00**2 + 2*k1x*t0*x10*z00*z01 + 2*k1x*t0*x10*z00*z10 - 2*k1x*t0*x10*z01*z10 + k1y**2*r1**2*t0**2 + 2*k1y**2*r1*r2*t0**2 + k1y**2*r2**2*t0**2 - k1y**2*t0**2*x00**2 + 2*k1y**2*t0**2*x00*x10 - k1y**2*t0**2*x10**2 - k1y**2*t0**2*z00**2 + 2*k1y**2*t0**2*z00*z10 - k1y**2*t0**2*z10**2 + 2*k1y*k1z*t0**2*y00*z00 - 2*k1y*k1z*t0**2*y00*z10 - 2*k1y*k1z*t0**2*y10*z00 + 2*k1y*k1z*t0**2*y10*z10 + 2*k1y*r1**2*t0*y00 - 2*k1y*r1**2*t0*y01 + 4*k1y*r1*r2*t0*y00 - 4*k1y*r1*r2*t0*y01 + 2*k1y*r2**2*t0*y00 - 2*k1y*r2**2*t0*y01 + 2*k1y*t0*x00**2*y01 - 2*k1y*t0*x00**2*y10 - 2*k1y*t0*x00*x01*y00 + 2*k1y*t0*x00*x01*y10 + 2*k1y*t0*x00*x10*y00 - 4*k1y*t0*x00*x10*y01 + 2*k1y*t0*x00*x10*y10 + 2*k1y*t0*x01*x10*y00 - 2*k1y*t0*x01*x10*y10 - 2*k1y*t0*x10**2*y00 + 2*k1y*t0*x10**2*y01 - 2*k1y*t0*y00*z00*z01 + 2*k1y*t0*y00*z00*z10 + 2*k1y*t0*y00*z01*z10 - 2*k1y*t0*y00*z10**2 + 2*k1y*t0*y01*z00**2 - 4*k1y*t0*y01*z00*z10 + 2*k1y*t0*y01*z10**2 - 2*k1y*t0*y10*z00**2 + 2*k1y*t0*y10*z00*z01 + 2*k1y*t0*y10*z00*z10 - 2*k1y*t0*y10*z01*z10 + k1z**2*r1**2*t0**2 + 2*k1z**2*r1*r2*t0**2 + k1z**2*r2**2*t0**2 - k1z**2*t0**2*x00**2 + 2*k1z**2*t0**2*x00*x10 - k1z**2*t0**2*x10**2 - k1z**2*t0**2*y00**2 + 2*k1z**2*t0**2*y00*y10 - k1z**2*t0**2*y10**2 + 2*k1z*r1**2*t0*z00 - 2*k1z*r1**2*t0*z01 + 4*k1z*r1*r2*t0*z00 - 4*k1z*r1*r2*t0*z01 + 2*k1z*r2**2*t0*z00 - 2*k1z*r2**2*t0*z01 + 2*k1z*t0*x00**2*z01 - 2*k1z*t0*x00**2*z10 - 2*k1z*t0*x00*x01*z00 + 2*k1z*t0*x00*x01*z10 + 2*k1z*t0*x00*x10*z00 - 4*k1z*t0*x00*x10*z01 + 2*k1z*t0*x00*x10*z10 + 2*k1z*t0*x01*x10*z00 - 2*k1z*t0*x01*x10*z10 - 2*k1z*t0*x10**2*z00 + 2*k1z*t0*x10**2*z01 + 2*k1z*t0*y00**2*z01 - 2*k1z*t0*y00**2*z10 - 2*k1z*t0*y00*y01*z00 + 2*k1z*t0*y00*y01*z10 + 2*k1z*t0*y00*y10*z00 - 4*k1z*t0*y00*y10*z01 + 2*k1z*t0*y00*y10*z10 + 2*k1z*t0*y01*y10*z00 - 2*k1z*t0*y01*y10*z10 - 2*k1z*t0*y10**2*z00 + 2*k1z*t0*y10**2*z01 + r1**2*x00**2 - 2*r1**2*x00*x01 + r1**2*x01**2 + r1**2*y00**2 - 2*r1**2*y00*y01 + r1**2*y01**2 + r1**2*z00**2 - 2*r1**2*z00*z01 + r1**2*z01**2 + 2*r1*r2*x00**2 - 4*r1*r2*x00*x01 + 2*r1*r2*x01**2 + 2*r1*r2*y00**2 - 4*r1*r2*y00*y01 + 2*r1*r2*y01**2 + 2*r1*r2*z00**2 - 4*r1*r2*z00*z01 + 2*r1*r2*z01**2 + r2**2*x00**2 - 2*r2**2*x00*x01 + r2**2*x01**2 + r2**2*y00**2 - 2*r2**2*y00*y01 + r2**2*y01**2 + r2**2*z00**2 - 2*r2**2*z00*z01 + r2**2*z01**2 - x00**2*y01**2 + 2*x00**2*y01*y10 - x00**2*y10**2 - x00**2*z01**2 + 2*x00**2*z01*z10 - x00**2*z10**2 + 2*x00*x01*y00*y01 - 2*x00*x01*y00*y10 - 2*x00*x01*y01*y10 + 2*x00*x01*y10**2 + 2*x00*x01*z00*z01 - 2*x00*x01*z00*z10 - 2*x00*x01*z01*z10 + 2*x00*x01*z10**2 - 2*x00*x10*y00*y01 + 2*x00*x10*y00*y10 + 2*x00*x10*y01**2 - 2*x00*x10*y01*y10 - 2*x00*x10*z00*z01 + 2*x00*x10*z00*z10 + 2*x00*x10*z01**2 - 2*x00*x10*z01*z10 - x01**2*y00**2 + 2*x01**2*y00*y10 - x01**2*y10**2 - x01**2*z00**2 + 2*x01**2*z00*z10 - x01**2*z10**2 + 2*x01*x10*y00**2 - 2*x01*x10*y00*y01 - 2*x01*x10*y00*y10 + 2*x01*x10*y01*y10 + 2*x01*x10*z00**2 - 2*x01*x10*z00*z01 - 2*x01*x10*z00*z10 + 2*x01*x10*z01*z10 - x10**2*y00**2 + 2*x10**2*y00*y01 - x10**2*y01**2 - x10**2*z00**2 + 2*x10**2*z00*z01 - x10**2*z01**2 - y00**2*z01**2 + 2*y00**2*z01*z10 - y00**2*z10**2 + 2*y00*y01*z00*z01 - 2*y00*y01*z00*z10 - 2*y00*y01*z01*z10 + 2*y00*y01*z10**2 - 2*y00*y10*z00*z01 + 2*y00*y10*z00*z10 + 2*y00*y10*z01**2 - 2*y00*y10*z01*z10 - y01**2*z00**2 + 2*y01**2*z00*z10 - y01**2*z10**2 + 2*y01*y10*z00**2 - 2*y01*y10*z00*z01 - 2*y01*y10*z00*z10 + 2*y01*y10*z01*z10 - y10**2*z00**2 + 2*y10**2*z00*z01 - y10**2*z01**2)))/(k1x**2*t0**2 + 2*k1x*t0*x00 - 2*k1x*t0*x01 + k1y**2*t0**2 + 2*k1y*t0*y00 - 2*k1y*t0*y01 + k1z**2*t0**2 + 2*k1z*t0*z00 - 2*k1z*t0*z01 + x00**2 - 2*x00*x01 + x01**2 + y00**2 - 2*y00*y01 + y01**2 + z00**2 - 2*z00*z01 + z01**2)
	try:
		v_1 = (t0*x00**2 - t0*x00*x01 - 2*t0*x00*x10 + t0*x00*x11 + t0*x01*x10 + t0*x10**2 - t0*x10*x11 + t0*y00**2 - t0*y00*y01 - 2*t0*y00*y10 + t0*y00*y11 + t0*y01*y10 + t0*y10**2 - t0*y10*y11 + t0*z00**2 - t0*z00*z01 - 2*t0*z00*z10 + t0*z00*z11 + t0*z01*z10 + t0*z10**2 - t0*z10*z11 - sqrt(t0**2*(r1**2*x00**2 - 2*r1**2*x00*x01 - 2*r1**2*x00*x10 + 2*r1**2*x00*x11 + r1**2*x01**2 + 2*r1**2*x01*x10 - 2*r1**2*x01*x11 + r1**2*x10**2 - 2*r1**2*x10*x11 + r1**2*x11**2 + r1**2*y00**2 - 2*r1**2*y00*y01 - 2*r1**2*y00*y10 + 2*r1**2*y00*y11 + r1**2*y01**2 + 2*r1**2*y01*y10 - 2*r1**2*y01*y11 + r1**2*y10**2 - 2*r1**2*y10*y11 + r1**2*y11**2 + r1**2*z00**2 - 2*r1**2*z00*z01 - 2*r1**2*z00*z10 + 2*r1**2*z00*z11 + r1**2*z01**2 + 2*r1**2*z01*z10 - 2*r1**2*z01*z11 + r1**2*z10**2 - 2*r1**2*z10*z11 + r1**2*z11**2 + 2*r1*r2*x00**2 - 4*r1*r2*x00*x01 - 4*r1*r2*x00*x10 + 4*r1*r2*x00*x11 + 2*r1*r2*x01**2 + 4*r1*r2*x01*x10 - 4*r1*r2*x01*x11 + 2*r1*r2*x10**2 - 4*r1*r2*x10*x11 + 2*r1*r2*x11**2 + 2*r1*r2*y00**2 - 4*r1*r2*y00*y01 - 4*r1*r2*y00*y10 + 4*r1*r2*y00*y11 + 2*r1*r2*y01**2 + 4*r1*r2*y01*y10 - 4*r1*r2*y01*y11 + 2*r1*r2*y10**2 - 4*r1*r2*y10*y11 + 2*r1*r2*y11**2 + 2*r1*r2*z00**2 - 4*r1*r2*z00*z01 - 4*r1*r2*z00*z10 + 4*r1*r2*z00*z11 + 2*r1*r2*z01**2 + 4*r1*r2*z01*z10 - 4*r1*r2*z01*z11 + 2*r1*r2*z10**2 - 4*r1*r2*z10*z11 + 2*r1*r2*z11**2 + r2**2*x00**2 - 2*r2**2*x00*x01 - 2*r2**2*x00*x10 + 2*r2**2*x00*x11 + r2**2*x01**2 + 2*r2**2*x01*x10 - 2*r2**2*x01*x11 + r2**2*x10**2 - 2*r2**2*x10*x11 + r2**2*x11**2 + r2**2*y00**2 - 2*r2**2*y00*y01 - 2*r2**2*y00*y10 + 2*r2**2*y00*y11 + r2**2*y01**2 + 2*r2**2*y01*y10 - 2*r2**2*y01*y11 + r2**2*y10**2 - 2*r2**2*y10*y11 + r2**2*y11**2 + r2**2*z00**2 - 2*r2**2*z00*z01 - 2*r2**2*z00*z10 + 2*r2**2*z00*z11 + r2**2*z01**2 + 2*r2**2*z01*z10 - 2*r2**2*z01*z11 + r2**2*z10**2 - 2*r2**2*z10*z11 + r2**2*z11**2 - x00**2*y01**2 + 2*x00**2*y01*y11 - x00**2*y11**2 - x00**2*z01**2 + 2*x00**2*z01*z11 - x00**2*z11**2 + 2*x00*x01*y00*y01 - 2*x00*x01*y00*y11 - 2*x00*x01*y01*y10 + 2*x00*x01*y10*y11 + 2*x00*x01*z00*z01 - 2*x00*x01*z00*z11 - 2*x00*x01*z01*z10 + 2*x00*x01*z10*z11 + 2*x00*x10*y01**2 - 4*x00*x10*y01*y11 + 2*x00*x10*y11**2 + 2*x00*x10*z01**2 - 4*x00*x10*z01*z11 + 2*x00*x10*z11**2 - 2*x00*x11*y00*y01 + 2*x00*x11*y00*y11 + 2*x00*x11*y01*y10 - 2*x00*x11*y10*y11 - 2*x00*x11*z00*z01 + 2*x00*x11*z00*z11 + 2*x00*x11*z01*z10 - 2*x00*x11*z10*z11 - x01**2*y00**2 + 2*x01**2*y00*y10 - x01**2*y10**2 - x01**2*z00**2 + 2*x01**2*z00*z10 - x01**2*z10**2 - 2*x01*x10*y00*y01 + 2*x01*x10*y00*y11 + 2*x01*x10*y01*y10 - 2*x01*x10*y10*y11 - 2*x01*x10*z00*z01 + 2*x01*x10*z00*z11 + 2*x01*x10*z01*z10 - 2*x01*x10*z10*z11 + 2*x01*x11*y00**2 - 4*x01*x11*y00*y10 + 2*x01*x11*y10**2 + 2*x01*x11*z00**2 - 4*x01*x11*z00*z10 + 2*x01*x11*z10**2 - x10**2*y01**2 + 2*x10**2*y01*y11 - x10**2*y11**2 - x10**2*z01**2 + 2*x10**2*z01*z11 - x10**2*z11**2 + 2*x10*x11*y00*y01 - 2*x10*x11*y00*y11 - 2*x10*x11*y01*y10 + 2*x10*x11*y10*y11 + 2*x10*x11*z00*z01 - 2*x10*x11*z00*z11 - 2*x10*x11*z01*z10 + 2*x10*x11*z10*z11 - x11**2*y00**2 + 2*x11**2*y00*y10 - x11**2*y10**2 - x11**2*z00**2 + 2*x11**2*z00*z10 - x11**2*z10**2 - y00**2*z01**2 + 2*y00**2*z01*z11 - y00**2*z11**2 + 2*y00*y01*z00*z01 - 2*y00*y01*z00*z11 - 2*y00*y01*z01*z10 + 2*y00*y01*z10*z11 + 2*y00*y10*z01**2 - 4*y00*y10*z01*z11 + 2*y00*y10*z11**2 - 2*y00*y11*z00*z01 + 2*y00*y11*z00*z11 + 2*y00*y11*z01*z10 - 2*y00*y11*z10*z11 - y01**2*z00**2 + 2*y01**2*z00*z10 - y01**2*z10**2 - 2*y01*y10*z00*z01 + 2*y01*y10*z00*z11 + 2*y01*y10*z01*z10 - 2*y01*y10*z10*z11 + 2*y01*y11*z00**2 - 4*y01*y11*z00*z10 + 2*y01*y11*z10**2 - y10**2*z01**2 + 2*y10**2*z01*z11 - y10**2*z11**2 + 2*y10*y11*z00*z01 - 2*y10*y11*z00*z11 - 2*y10*y11*z01*z10 + 2*y10*y11*z10*z11 - y11**2*z00**2 + 2*y11**2*z00*z10 - y11**2*z10**2)))/(x00**2 - 2*x00*x01 - 2*x00*x10 + 2*x00*x11 + x01**2 + 2*x01*x10 - 2*x01*x11 + x10**2 - 2*x10*x11 + x11**2 + y00**2 - 2*y00*y01 - 2*y00*y10 + 2*y00*y11 + y01**2 + 2*y01*y10 - 2*y01*y11 + y10**2 - 2*y10*y11 + y11**2 + z00**2 - 2*z00*z01 - 2*z00*z10 + 2*z00*z11 + z01**2 + 2*z01*z10 - 2*z01*z11 + z10**2 - 2*z10*z11 + z11**2)
	except:
		v_1 = None
	try:
		v_2 = (t0*(x00**2 - x00*x01 - 2*x00*x10 + x00*x11 + x01*x10 + x10**2 - x10*x11 + y00**2 - y00*y01 - 2*y00*y10 + y00*y11 + y01*y10 + y10**2 - y10*y11 + z00**2 - z00*z01 - 2*z00*z10 + z00*z11 + z01*z10 + z10**2 - z10*z11) + sqrt(t0**2*(r1**2*x00**2 - 2*r1**2*x00*x01 - 2*r1**2*x00*x10 + 2*r1**2*x00*x11 + r1**2*x01**2 + 2*r1**2*x01*x10 - 2*r1**2*x01*x11 + r1**2*x10**2 - 2*r1**2*x10*x11 + r1**2*x11**2 + r1**2*y00**2 - 2*r1**2*y00*y01 - 2*r1**2*y00*y10 + 2*r1**2*y00*y11 + r1**2*y01**2 + 2*r1**2*y01*y10 - 2*r1**2*y01*y11 + r1**2*y10**2 - 2*r1**2*y10*y11 + r1**2*y11**2 + r1**2*z00**2 - 2*r1**2*z00*z01 - 2*r1**2*z00*z10 + 2*r1**2*z00*z11 + r1**2*z01**2 + 2*r1**2*z01*z10 - 2*r1**2*z01*z11 + r1**2*z10**2 - 2*r1**2*z10*z11 + r1**2*z11**2 + 2*r1*r2*x00**2 - 4*r1*r2*x00*x01 - 4*r1*r2*x00*x10 + 4*r1*r2*x00*x11 + 2*r1*r2*x01**2 + 4*r1*r2*x01*x10 - 4*r1*r2*x01*x11 + 2*r1*r2*x10**2 - 4*r1*r2*x10*x11 + 2*r1*r2*x11**2 + 2*r1*r2*y00**2 - 4*r1*r2*y00*y01 - 4*r1*r2*y00*y10 + 4*r1*r2*y00*y11 + 2*r1*r2*y01**2 + 4*r1*r2*y01*y10 - 4*r1*r2*y01*y11 + 2*r1*r2*y10**2 - 4*r1*r2*y10*y11 + 2*r1*r2*y11**2 + 2*r1*r2*z00**2 - 4*r1*r2*z00*z01 - 4*r1*r2*z00*z10 + 4*r1*r2*z00*z11 + 2*r1*r2*z01**2 + 4*r1*r2*z01*z10 - 4*r1*r2*z01*z11 + 2*r1*r2*z10**2 - 4*r1*r2*z10*z11 + 2*r1*r2*z11**2 + r2**2*x00**2 - 2*r2**2*x00*x01 - 2*r2**2*x00*x10 + 2*r2**2*x00*x11 + r2**2*x01**2 + 2*r2**2*x01*x10 - 2*r2**2*x01*x11 + r2**2*x10**2 - 2*r2**2*x10*x11 + r2**2*x11**2 + r2**2*y00**2 - 2*r2**2*y00*y01 - 2*r2**2*y00*y10 + 2*r2**2*y00*y11 + r2**2*y01**2 + 2*r2**2*y01*y10 - 2*r2**2*y01*y11 + r2**2*y10**2 - 2*r2**2*y10*y11 + r2**2*y11**2 + r2**2*z00**2 - 2*r2**2*z00*z01 - 2*r2**2*z00*z10 + 2*r2**2*z00*z11 + r2**2*z01**2 + 2*r2**2*z01*z10 - 2*r2**2*z01*z11 + r2**2*z10**2 - 2*r2**2*z10*z11 + r2**2*z11**2 - x00**2*y01**2 + 2*x00**2*y01*y11 - x00**2*y11**2 - x00**2*z01**2 + 2*x00**2*z01*z11 - x00**2*z11**2 + 2*x00*x01*y00*y01 - 2*x00*x01*y00*y11 - 2*x00*x01*y01*y10 + 2*x00*x01*y10*y11 + 2*x00*x01*z00*z01 - 2*x00*x01*z00*z11 - 2*x00*x01*z01*z10 + 2*x00*x01*z10*z11 + 2*x00*x10*y01**2 - 4*x00*x10*y01*y11 + 2*x00*x10*y11**2 + 2*x00*x10*z01**2 - 4*x00*x10*z01*z11 + 2*x00*x10*z11**2 - 2*x00*x11*y00*y01 + 2*x00*x11*y00*y11 + 2*x00*x11*y01*y10 - 2*x00*x11*y10*y11 - 2*x00*x11*z00*z01 + 2*x00*x11*z00*z11 + 2*x00*x11*z01*z10 - 2*x00*x11*z10*z11 - x01**2*y00**2 + 2*x01**2*y00*y10 - x01**2*y10**2 - x01**2*z00**2 + 2*x01**2*z00*z10 - x01**2*z10**2 - 2*x01*x10*y00*y01 + 2*x01*x10*y00*y11 + 2*x01*x10*y01*y10 - 2*x01*x10*y10*y11 - 2*x01*x10*z00*z01 + 2*x01*x10*z00*z11 + 2*x01*x10*z01*z10 - 2*x01*x10*z10*z11 + 2*x01*x11*y00**2 - 4*x01*x11*y00*y10 + 2*x01*x11*y10**2 + 2*x01*x11*z00**2 - 4*x01*x11*z00*z10 + 2*x01*x11*z10**2 - x10**2*y01**2 + 2*x10**2*y01*y11 - x10**2*y11**2 - x10**2*z01**2 + 2*x10**2*z01*z11 - x10**2*z11**2 + 2*x10*x11*y00*y01 - 2*x10*x11*y00*y11 - 2*x10*x11*y01*y10 + 2*x10*x11*y10*y11 + 2*x10*x11*z00*z01 - 2*x10*x11*z00*z11 - 2*x10*x11*z01*z10 + 2*x10*x11*z10*z11 - x11**2*y00**2 + 2*x11**2*y00*y10 - x11**2*y10**2 - x11**2*z00**2 + 2*x11**2*z00*z10 - x11**2*z10**2 - y00**2*z01**2 + 2*y00**2*z01*z11 - y00**2*z11**2 + 2*y00*y01*z00*z01 - 2*y00*y01*z00*z11 - 2*y00*y01*z01*z10 + 2*y00*y01*z10*z11 + 2*y00*y10*z01**2 - 4*y00*y10*z01*z11 + 2*y00*y10*z11**2 - 2*y00*y11*z00*z01 + 2*y00*y11*z00*z11 + 2*y00*y11*z01*z10 - 2*y00*y11*z10*z11 - y01**2*z00**2 + 2*y01**2*z00*z10 - y01**2*z10**2 - 2*y01*y10*z00*z01 + 2*y01*y10*z00*z11 + 2*y01*y10*z01*z10 - 2*y01*y10*z10*z11 + 2*y01*y11*z00**2 - 4*y01*y11*z00*z10 + 2*y01*y11*z10**2 - y10**2*z01**2 + 2*y10**2*z01*z11 - y10**2*z11**2 + 2*y10*y11*z00*z01 - 2*y10*y11*z00*z11 - 2*y10*y11*z01*z10 + 2*y10*y11*z10*z11 - y11**2*z00**2 + 2*y11**2*z00*z10 - y11**2*z10**2)))/(x00**2 - 2*x00*x01 - 2*x00*x10 + 2*x00*x11 + x01**2 + 2*x01*x10 - 2*x01*x11 + x10**2 - 2*x10*x11 + x11**2 + y00**2 - 2*y00*y01 - 2*y00*y10 + 2*y00*y11 + y01**2 + 2*y01*y10 - 2*y01*y11 + y10**2 - 2*y10*y11 + y11**2 + z00**2 - 2*z00*z01 - 2*z00*z10 + 2*z00*z11 + z01**2 + 2*z01*z10 - 2*z01*z11 + z10**2 - 2*z10*z11 + z11**2)
	except:
		v_2 = None
	print('++++++++\n[{}, {}]'.format(v_1, v_2))
	vs_2 = [None, None]
	if not (v_1 == None and v_2 == None):
		vs = sorted([v_1, v_2])
		print(vs)
		for i, j in zip(vs, range(len(vs_2))):
			if i >=0 and i<=t0:
				vs_2[j] = i
		print(vs_2)
		# vs = [ifor i in va if i>=0 and i<=t0]
		
		# vs = [i for i in [v_1, v_2] if i>0 and i<=t0]
		# if vs:
		# 	v = min(vs)
		# else:
		# 	v = None
		# print('t0 = {}\nmin({}, {}) \n\t= {}'.format(t0, v_1, v_2, v))
		# print('t0 = {}\nv = {}'.format(t0, v))


	ax.plot([x00, x01], [y00, y01], [z00, z01], color='blue')
	ax.scatter([x00, x01], [y00, y01], [z00, z01], color='blue')
	ax.plot([x10, x11], [y10, y11], [z10, z11], color='green')
	ax.scatter([x10, x11], [y10, y11], [z10, z11], color='green')
	ax.set_xlabel('x')
	ax.set_ylabel('y')
	ax.set_zlabel('z')
	# ax.set_xlim(0, 10)
	# ax.set_ylim(0, 10)
	# ax.set_zlim(0, 10)
	v = vs_2[0]
	if v != None:
		ax.scatter([k0x * v + b0x, k1x * v + b1x], [k0y * v + b0y, k1y * v + b1y], [k0z * v + b0z, k1z * v + b1z], color='yellow')
	v = vs_2[1]
	if v != None:
		ax.scatter([k0x * v + b0x, k1x * v + b1x], [k0y * v + b0y, k1y * v + b1y], [k0z * v + b0z, k1z * v + b1z], color='red')

	plt.show()