from math import *
# import sympy as sym
from sympy import *
from sympy.solvers import solve
import numpy as np

# x, y, z = symbols('x y z')
# expr = cos(x) + 1
# expr.subs(x, y)
# y = 2
# print(expr.subs(x, y).evalf())
# print(type(expr))
# exit()

# t0  = Symbol('t0')
# t1  = Symbol('t1')
# # r = 2 + t1
# t1 = 5
# t0 = 2
# print(type((t0 + t1)))
# print((t0 + t1).evalf())

# exit()
t   = Symbol('t')
t0  = Symbol('t0')

x0, y0, z0 = symbols('x0 y0 z0')
k0x, k0y, k0z = symbols('k0x k0y k0z')
x00, x01, y01, y00, z01, z00 = symbols('x00 x01 y01 y00 z01 z00')
b0x, b0y, b0z = symbols('b0x b0y b0z')
k0x = (x01 - x00) / t0
k0y = (y01 - y00) / t0
k0z = (z01 - z00) / t0
b0x, b0y, b0z = x00, y00, z00# - k0x*t0
# b0y = y00# - k0y*t0
# b0z = z00# - k0z*t0
x0, y0, z0 = k0x*t + b0x, k0y*t + b0y, k0z*t + b0z
# y0 = Symbol('y0')
# z0 = Symbol('z0')

x1, y1, z1 = symbols('x1 y1 z1')
k1x, k1y, k1z = symbols('k1x k1y k1z')
x11, x10, y11, y10, z11, z10 = symbols('x11 x10 y11 y10 z11 z10')
k1z = (z11 - z10) / t0
k1y = (y11 - y10) / t0
k1x = (x11 - x10) / t0


b1x, b1y, b1z = symbols('b1x b1y b1z')

b1x, b1y, b1z = x10, y10, z10# - k0x*t0
# - k0y*t0
# - k0z*t0
x1, y1, z1 = k1x*t + b1x, k1y*t + b1y, k1z*t + b1z

r1 = Symbol('r1')
r2 = Symbol('r2')

roots = solve((x0-x1)**2 + (y0-y1)**2 + (z0-z1)**2 - (r1 + r2)**2, t)
# roots = solve((x0-x1) - (r1 + r2)**2, t)
print(roots)

t0 = 1e-2
x00, y00, z00 = 0, 1, 5
x01, y01, z01 = 0, 10, 15
x10, y10, z10 = 0, 11, 14
x11, y11, z11 = 0, -2, -5
r1, r2 = 1, 1

# root = (k1x*t0**2*x00 - k1x*t0**2*x10 + k1y*t0**2*y00 - k1y*t0**2*y10 + k1z*t0**2*z00 - k1z*t0**2*z10 + t0*x00**2 - t0*x00*x01 - t0*x00*x10 + t0*x01*x10 + t0*y00**2 - t0*y00*y01 - t0*y00*y10 + t0*y01*y10 + t0*z00**2 - t0*z00*z01 - t0*z00*z10 + t0*z01*z10 - sqrt(t0**2*(k1x**2*r1**2*t0**2 + 2*k1x**2*r1*r2*t0**2 + k1x**2*r2**2*t0**2 - k1x**2*t0**2*y00**2 + 2*k1x**2*t0**2*y00*y10 - k1x**2*t0**2*y10**2 - k1x**2*t0**2*z00**2 + 2*k1x**2*t0**2*z00*z10 - k1x**2*t0**2*z10**2 + 2*k1x*k1y*t0**2*x00*y00 - 2*k1x*k1y*t0**2*x00*y10 - 2*k1x*k1y*t0**2*x10*y00 + 2*k1x*k1y*t0**2*x10*y10 + 2*k1x*k1z*t0**2*x00*z00 - 2*k1x*k1z*t0**2*x00*z10 - 2*k1x*k1z*t0**2*x10*z00 + 2*k1x*k1z*t0**2*x10*z10 + 2*k1x*r1**2*t0*x00 - 2*k1x*r1**2*t0*x01 + 4*k1x*r1*r2*t0*x00 - 4*k1x*r1*r2*t0*x01 + 2*k1x*r2**2*t0*x00 - 2*k1x*r2**2*t0*x01 - 2*k1x*t0*x00*y00*y01 + 2*k1x*t0*x00*y00*y10 + 2*k1x*t0*x00*y01*y10 - 2*k1x*t0*x00*y10**2 - 2*k1x*t0*x00*z00*z01 + 2*k1x*t0*x00*z00*z10 + 2*k1x*t0*x00*z01*z10 - 2*k1x*t0*x00*z10**2 + 2*k1x*t0*x01*y00**2 - 4*k1x*t0*x01*y00*y10 + 2*k1x*t0*x01*y10**2 + 2*k1x*t0*x01*z00**2 - 4*k1x*t0*x01*z00*z10 + 2*k1x*t0*x01*z10**2 - 2*k1x*t0*x10*y00**2 + 2*k1x*t0*x10*y00*y01 + 2*k1x*t0*x10*y00*y10 - 2*k1x*t0*x10*y01*y10 - 2*k1x*t0*x10*z00**2 + 2*k1x*t0*x10*z00*z01 + 2*k1x*t0*x10*z00*z10 - 2*k1x*t0*x10*z01*z10 + k1y**2*r1**2*t0**2 + 2*k1y**2*r1*r2*t0**2 + k1y**2*r2**2*t0**2 - k1y**2*t0**2*x00**2 + 2*k1y**2*t0**2*x00*x10 - k1y**2*t0**2*x10**2 - k1y**2*t0**2*z00**2 + 2*k1y**2*t0**2*z00*z10 - k1y**2*t0**2*z10**2 + 2*k1y*k1z*t0**2*y00*z00 - 2*k1y*k1z*t0**2*y00*z10 - 2*k1y*k1z*t0**2*y10*z00 + 2*k1y*k1z*t0**2*y10*z10 + 2*k1y*r1**2*t0*y00 - 2*k1y*r1**2*t0*y01 + 4*k1y*r1*r2*t0*y00 - 4*k1y*r1*r2*t0*y01 + 2*k1y*r2**2*t0*y00 - 2*k1y*r2**2*t0*y01 + 2*k1y*t0*x00**2*y01 - 2*k1y*t0*x00**2*y10 - 2*k1y*t0*x00*x01*y00 + 2*k1y*t0*x00*x01*y10 + 2*k1y*t0*x00*x10*y00 - 4*k1y*t0*x00*x10*y01 + 2*k1y*t0*x00*x10*y10 + 2*k1y*t0*x01*x10*y00 - 2*k1y*t0*x01*x10*y10 - 2*k1y*t0*x10**2*y00 + 2*k1y*t0*x10**2*y01 - 2*k1y*t0*y00*z00*z01 + 2*k1y*t0*y00*z00*z10 + 2*k1y*t0*y00*z01*z10 - 2*k1y*t0*y00*z10**2 + 2*k1y*t0*y01*z00**2 - 4*k1y*t0*y01*z00*z10 + 2*k1y*t0*y01*z10**2 - 2*k1y*t0*y10*z00**2 + 2*k1y*t0*y10*z00*z01 + 2*k1y*t0*y10*z00*z10 - 2*k1y*t0*y10*z01*z10 + k1z**2*r1**2*t0**2 + 2*k1z**2*r1*r2*t0**2 + k1z**2*r2**2*t0**2 - k1z**2*t0**2*x00**2 + 2*k1z**2*t0**2*x00*x10 - k1z**2*t0**2*x10**2 - k1z**2*t0**2*y00**2 + 2*k1z**2*t0**2*y00*y10 - k1z**2*t0**2*y10**2 + 2*k1z*r1**2*t0*z00 - 2*k1z*r1**2*t0*z01 + 4*k1z*r1*r2*t0*z00 - 4*k1z*r1*r2*t0*z01 + 2*k1z*r2**2*t0*z00 - 2*k1z*r2**2*t0*z01 + 2*k1z*t0*x00**2*z01 - 2*k1z*t0*x00**2*z10 - 2*k1z*t0*x00*x01*z00 + 2*k1z*t0*x00*x01*z10 + 2*k1z*t0*x00*x10*z00 - 4*k1z*t0*x00*x10*z01 + 2*k1z*t0*x00*x10*z10 + 2*k1z*t0*x01*x10*z00 - 2*k1z*t0*x01*x10*z10 - 2*k1z*t0*x10**2*z00 + 2*k1z*t0*x10**2*z01 + 2*k1z*t0*y00**2*z01 - 2*k1z*t0*y00**2*z10 - 2*k1z*t0*y00*y01*z00 + 2*k1z*t0*y00*y01*z10 + 2*k1z*t0*y00*y10*z00 - 4*k1z*t0*y00*y10*z01 + 2*k1z*t0*y00*y10*z10 + 2*k1z*t0*y01*y10*z00 - 2*k1z*t0*y01*y10*z10 - 2*k1z*t0*y10**2*z00 + 2*k1z*t0*y10**2*z01 + r1**2*x00**2 - 2*r1**2*x00*x01 + r1**2*x01**2 + r1**2*y00**2 - 2*r1**2*y00*y01 + r1**2*y01**2 + r1**2*z00**2 - 2*r1**2*z00*z01 + r1**2*z01**2 + 2*r1*r2*x00**2 - 4*r1*r2*x00*x01 + 2*r1*r2*x01**2 + 2*r1*r2*y00**2 - 4*r1*r2*y00*y01 + 2*r1*r2*y01**2 + 2*r1*r2*z00**2 - 4*r1*r2*z00*z01 + 2*r1*r2*z01**2 + r2**2*x00**2 - 2*r2**2*x00*x01 + r2**2*x01**2 + r2**2*y00**2 - 2*r2**2*y00*y01 + r2**2*y01**2 + r2**2*z00**2 - 2*r2**2*z00*z01 + r2**2*z01**2 - x00**2*y01**2 + 2*x00**2*y01*y10 - x00**2*y10**2 - x00**2*z01**2 + 2*x00**2*z01*z10 - x00**2*z10**2 + 2*x00*x01*y00*y01 - 2*x00*x01*y00*y10 - 2*x00*x01*y01*y10 + 2*x00*x01*y10**2 + 2*x00*x01*z00*z01 - 2*x00*x01*z00*z10 - 2*x00*x01*z01*z10 + 2*x00*x01*z10**2 - 2*x00*x10*y00*y01 + 2*x00*x10*y00*y10 + 2*x00*x10*y01**2 - 2*x00*x10*y01*y10 - 2*x00*x10*z00*z01 + 2*x00*x10*z00*z10 + 2*x00*x10*z01**2 - 2*x00*x10*z01*z10 - x01**2*y00**2 + 2*x01**2*y00*y10 - x01**2*y10**2 - x01**2*z00**2 + 2*x01**2*z00*z10 - x01**2*z10**2 + 2*x01*x10*y00**2 - 2*x01*x10*y00*y01 - 2*x01*x10*y00*y10 + 2*x01*x10*y01*y10 + 2*x01*x10*z00**2 - 2*x01*x10*z00*z01 - 2*x01*x10*z00*z10 + 2*x01*x10*z01*z10 - x10**2*y00**2 + 2*x10**2*y00*y01 - x10**2*y01**2 - x10**2*z00**2 + 2*x10**2*z00*z01 - x10**2*z01**2 - y00**2*z01**2 + 2*y00**2*z01*z10 - y00**2*z10**2 + 2*y00*y01*z00*z01 - 2*y00*y01*z00*z10 - 2*y00*y01*z01*z10 + 2*y00*y01*z10**2 - 2*y00*y10*z00*z01 + 2*y00*y10*z00*z10 + 2*y00*y10*z01**2 - 2*y00*y10*z01*z10 - y01**2*z00**2 + 2*y01**2*z00*z10 - y01**2*z10**2 + 2*y01*y10*z00**2 - 2*y01*y10*z00*z01 - 2*y01*y10*z00*z10 + 2*y01*y10*z01*z10 - y10**2*z00**2 + 2*y10**2*z00*z01 - y10**2*z01**2)))/(k1x**2*t0**2 + 2*k1x*t0*x00 - 2*k1x*t0*x01 + k1y**2*t0**2 + 2*k1y*t0*y00 - 2*k1y*t0*y01 + k1z**2*t0**2 + 2*k1z*t0*z00 - 2*k1z*t0*z01 + x00**2 - 2*x00*x01 + x01**2 + y00**2 - 2*y00*y01 + y01**2 + z00**2 - 2*z00*z01 + z01**2)
# root = root.subs(y10, 10)
r = roots[0].subs(r1+r2, 1)
print(r.evalf())
# print(type(roots[0]))
# print([root.evalf() for root in roots])
